<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>développement on The Geek In The Shell</title>
    <link>https://tgits.github.io/tags/d%C3%A9veloppement/</link>
    <description>Recent content in développement on The Geek In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Fri, 07 May 2021 14:27:47 +0200</lastBuildDate>
    
	<atom:link href="https://tgits.github.io/tags/d%C3%A9veloppement/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes d&#39;apprentissage de Python : traitement des séquences avec un style fonctionnelle - flatmap</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_tssf_flatmap/</link>
      <pubDate>Fri, 07 May 2021 14:27:47 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_tssf_flatmap/</guid>
      <description>Contexte Ce billet s&amp;rsquo;inscrit dans une série de billets sur le traitement des séquences avec un style fonctionnelle en Python.
NB : La version de Python utilisée dans les exemples de code est la version 3.
Pour pleinement profiter de ce billet, il faut que vous connaissiez déjà le fonctionnement de map et reduce en Python ou que vous lisiez d&amp;rsquo;abord les billets que j&amp;rsquo;ai écrit sur l&amp;rsquo;un et l&amp;rsquo;autre.</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : traitement des séquences avec un style fonctionnelle - reduce</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_tssf_reduce/</link>
      <pubDate>Fri, 07 May 2021 14:27:46 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_tssf_reduce/</guid>
      <description>Contexte Ce billet s&amp;rsquo;inscrit dans une série de billets sur le traitement des séquences avec un style fonctionnelle en Python.
NB : La version de Python utilisée dans les exemples de code est la version 3.
Principe Comme filter et map, la fonction reduce transforme une séquence qui lui est fourni en paramètre grâce à une fonction qui lui est également fournie en paramètre en parcourant la séquence de la gauche vers la droite.</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : traitement des séquences avec un style fonctionnelle - map</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_tssf_map/</link>
      <pubDate>Fri, 07 May 2021 14:27:45 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_tssf_map/</guid>
      <description>Contexte Ce billet s&amp;rsquo;inscrit dans une série de billets sur le traitement des séquences avec un style fonctionnelle en Python.
NB : La version de Python utilisée dans les exemples de code est la version 3.
Principe La fonction map est native tout comme filter et prend également en paramètre une fonction et une séquence d&amp;rsquo;éléments.
La fonction map permet d&amp;rsquo;appliquer cette fonction à chaque élément de la séquence et produit une nouvelle séquence résultante dont chaque élément est le résultat de l&amp;rsquo;application de cette fonction sur chaque élément de la séquence initiale.</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : traitement des séquences avec un style fonctionnelle - filter</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_tssf_filter/</link>
      <pubDate>Fri, 07 May 2021 14:27:44 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_tssf_filter/</guid>
      <description>Contexte Ce billet s&amp;rsquo;inscrit dans une série de billets sur le traitement des séquences avec un style fonctionnelle en Python.
NB : La version de Python utilisée dans les exemples de code est la version 3.
Principe La fonction filter est native et prend en paramètre une fonction et une séquence d&amp;rsquo;éléments ; elle retourne un objet iterator.
La fonction doit prendre un paramètre dont le type correspond aux éléments de la séquence et retourne un booléen (on peut parler de fonction prédicat ou de prédicat).</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : traitement des séquences avec un style fonctionnelle</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_traiter_sequences_avec_style_fonctionnelle/</link>
      <pubDate>Fri, 07 May 2021 14:27:43 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_traiter_sequences_avec_style_fonctionnelle/</guid>
      <description>Contexte Python est un langage de programmation très abordable que l&amp;rsquo;on démarre en programmation ou que l&amp;rsquo;on connaisse déjà d&amp;rsquo;autres langages. Néanmoins, ce n&amp;rsquo;est pas parce qu&amp;rsquo;un langage est abordable qu&amp;rsquo;il n&amp;rsquo;a pas ses propres idiomes et qu&amp;rsquo;il n&amp;rsquo;y a pas des trucs &amp;amp; astuces à connaître et à retenir.
Ce billet est l&amp;rsquo;introduction d&amp;rsquo;une série de notes d&amp;rsquo;apprentissage de Python, sur la manière de traiter les séquences en Python dans un style fonctionnelle.</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : zip et unzip</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_zip/</link>
      <pubDate>Sun, 22 Nov 2020 18:27:43 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_zip/</guid>
      <description>Contexte Python est un langage de programmation très abordable que l&amp;rsquo;on démarre en programmation ou que l&amp;rsquo;on connaisse déjà d&amp;rsquo;autres langages. Néanmoins, ce n&amp;rsquo;est pas parce qu&amp;rsquo;un langage est abordable qu&amp;rsquo;il n&amp;rsquo;a pas ses propres idiomes et qu&amp;rsquo;il n&amp;rsquo;y a pas des trucs &amp;amp; astuces à connaître et à retenir.
Ci-après, une petite note d&amp;rsquo;apprentissage de Python, sur la fonction zip. Il faut noter que c&amp;rsquo;est un billet relativement court, je l&amp;rsquo;ai un peu compressé !</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : les compréhensions</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_comprehension/</link>
      <pubDate>Sat, 31 Oct 2020 14:27:43 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_comprehension/</guid>
      <description>Contexte Python est un langage de programmation très abordable que l&amp;rsquo;on démarre en programmation ou que l&amp;rsquo;on connaisse déjà d&amp;rsquo;autres langages. Néanmoins, ce n&amp;rsquo;est pas parce qu&amp;rsquo;un langage est abordable qu&amp;rsquo;il n&amp;rsquo;a pas ses propres idiomes et qu&amp;rsquo;il n&amp;rsquo;y a pas des trucs &amp;amp; astuces à connaître et à retenir.
Ci-après, une petite note d&amp;rsquo;apprentissage de Python, sur les compréhensions en Python.
NB : c&amp;rsquo;est du Python 3 qui est utilisé.</description>
    </item>
    
    <item>
      <title>Notes apprentissage : une séquence renversante</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_reverse_sequence/</link>
      <pubDate>Wed, 21 Oct 2020 18:13:27 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_reverse_sequence/</guid>
      <description>Contexte Python est un langage de programmation très abordable que l&amp;rsquo;on démarre en programmation ou que l&amp;rsquo;on connaisse déjà d&amp;rsquo;autres langages. Néanmoins, ce n&amp;rsquo;est pas parce qu&amp;rsquo;un langage est abordable qu&amp;rsquo;il n&amp;rsquo;a pas ses propres idiomes et qu&amp;rsquo;il n&amp;rsquo;y a pas des trucs &amp;amp; astuces à connaître et à retenir.
Ci-après, une petite note d&amp;rsquo;apprentissage de Python, sur la manière d&amp;rsquo;inverser les éléments d&amp;rsquo;une liste et d&amp;rsquo;une chaine de caractères.</description>
    </item>
    
    <item>
      <title>Notes d&#39;apprentissage de Python : les boucles for et enumerate</title>
      <link>https://tgits.github.io/post/notes_apprentissage_python_enumerate/</link>
      <pubDate>Wed, 21 Oct 2020 18:13:27 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/notes_apprentissage_python_enumerate/</guid>
      <description>Contexte Python est un langage de programmation très abordable que l&amp;rsquo;on démarre en programmation ou que l&amp;rsquo;on connaisse déjà d&amp;rsquo;autres langages. Néanmoins, ce n&amp;rsquo;est pas parce qu&amp;rsquo;un langage est abordable qu&amp;rsquo;il n&amp;rsquo;a pas ses propres idiomes et qu&amp;rsquo;il n&amp;rsquo;y a pas des trucs &amp;amp; astuces à connaître et à retenir.
Ci-après, une petite note d&amp;rsquo;apprentissage de Python, sur l&amp;rsquo;utilisation de enumerate.
NB : c&amp;rsquo;est du Python 3 qui est utilisé.</description>
    </item>
    
    <item>
      <title>Apprendre à coder à son enfant, premier REX</title>
      <link>https://tgits.github.io/post/apprendre_a_coder_a_son_enfant_premier_rex/</link>
      <pubDate>Mon, 19 Oct 2020 12:09:27 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/apprendre_a_coder_a_son_enfant_premier_rex/</guid>
      <description>Introduction Depuis la fin Août 2020, j&amp;rsquo;ai commencé à apprendre à mon fils à coder. Ce billet est un premier retour d&amp;rsquo;expérience sur cette apprentissage après presque 2 mois. L&amp;rsquo;occasion de faire le point, prendre du recul, de partager cela avec d&amp;rsquo;autres informaticiens ou informaticiennes qui seraient dans une démarche similaire et idéalement de pouvoir avoir un échange sur le sujet.
Contexte Mon fils a 11 ans, il vient d&amp;rsquo;entrer en 5ème au collège.</description>
    </item>
    
    <item>
      <title>Tableau de fréquences en Python</title>
      <link>https://tgits.github.io/post/frequencies_map_in_python/</link>
      <pubDate>Sat, 03 Oct 2020 12:01:23 +0200</pubDate>
      
      <guid>https://tgits.github.io/post/frequencies_map_in_python/</guid>
      <description>Il y a quelques temps j&amp;rsquo;ai publié un billet sur les tableaux de fréquences en Java avec les streams. Faisant un peu de Python en ce moment, je me suis demandé comment je pouvais le faire en Python de manière idiomatique (ou du moins d&amp;rsquo;une manière qui me semble idiomatique en Python).
Pour rappel, je traduis ici par tableau de fréquences l&amp;rsquo;expression anglaise de frequencies map. Vous avez une liste d&amp;rsquo;éléments et vous voulez pour chaque élément connaître sa fréquence (le nombre de fois où cet élément est présent dans cette liste).</description>
    </item>
    
  </channel>
</rss>